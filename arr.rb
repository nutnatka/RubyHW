#3Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].	
task3 = -> {
arr = [0,25,18,-40,11,-8,4,18,-15,6,49, 0,18,-40,58,11,18,18,36,-25,6,10,-4,11,-15,58,-4,10]
index = ""
arr.each_with_index {  |el, i|  
    if arr[0] < arr[i] && arr[i] < arr[-1] 
        puts i 
        break 
    end
}
}

#5Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.	
task5 = -> {
    arr = [58,25,11,-8,4,18,-15,49,36,-25,6,10,-4,58,-25,-30]
    result=arr.each_with_index.map { |el, i| 
        if i != 0 && i !=arr.length-1
            el = el.even? ? el + arr.first : el            
        end 
        el
    }
       
    puts result
}

#4Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].	
task4 = -> {
    arr = [0,25,18,-40,11,-8,4,18,-15,6,49, 0,18,-40,58,11,18,18,36,-25,6,10,-4,11,-15,58,-4,10]
    result = nil
    arr.each_with_index {  |el, i| result = i if arr[0] < arr[i] && arr[i] < arr[-1] }
    puts resulthttps://github.com/nutnatka/RubyHW
    }

#Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.	
task5 = -> {
    arr = [58,25,11,-8,4,18,-15,49,36,-25,6,10,-4,58,-25,-30]
    ('а'..'b').to_a 
    a=3
    b=10
    arr.each_with_index {|i,el| puts el if arr=('а'..'b').to_a}
}


#13.Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.																									
#14.Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.
task13 = -> {
arr = [0,25,18,-40,11,-8,4,18,-15,6,49, 0,18,-40,58,11,18,18,36,-25,6,10,-4,11,-15,58,-4,10]
arr[1..-1] + [ i[0] ]
puts arr
}

task4.call